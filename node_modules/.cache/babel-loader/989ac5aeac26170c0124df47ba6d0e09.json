{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\react\\\\src\\\\components\\\\Movie\\\\Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === 'Director');\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.log('Error : ', error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"header=\", 'Actors', this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"No Movie Found\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:\\wamp64\\www\\react\\src\\components\\Movie\\Movie.js"],"names":["React","Component","API_URL","API_KEY","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","console","log","componentDidMount","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {API_URL,API_KEY,IMAGE_BASE_URL,BACKDROP_SIZE,POSTER_SIZE} from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation';\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\r\nimport Actor from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css';\r\nclass Movie extends Component{\r\n    state ={\r\n        movie:null,\r\n        actors:null,\r\n        directors:[],\r\n        loading:false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({loading:true})\r\n        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\r\n        this.fetchItems(endpoint);\r\n    }\r\n    fetchItems = (endpoint)=>{\r\n        fetch(endpoint)\r\n        .then(result =>result.json())\r\n        .then(result =>{\r\n            if(result.status_code){\r\n                this.setState({loading:false});\r\n            }else{\r\n                this.setState({movie:result},()=>{\r\n                    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\r\n                    fetch(endpoint)\r\n                    .then(result =>result.json())\r\n                    .then(result =>{\r\n                        const directors = result.crew.filter((member)=>member.job ==='Director');\r\n                        this.setState({\r\n                            actors :result.cast,\r\n                            directors,\r\n                            loading:false\r\n                        })\r\n                         \r\n                    });\r\n                });\r\n            }\r\n        }).catch(error=>console.log('Error : ',error))\r\n    }\r\n    render(){\r\n        return (\r\n            <div className='rmdb-movie'>\r\n                {this.state.movie ?\r\n                    <div>\r\n                        <Navigation  movie={this.props.location.movieName} />\r\n                        <MovieInfo movie={this.state.movie}  directors={this.state.directors} />\r\n                        <MovieInfoBar  time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue}/>    \r\n                    </div>\r\n                    :null}\r\n                    {this.state.actors ?\r\n                        <div className='rmdb-movie-grid'>\r\n                            <FourColGrid>\r\n                                header={'Actors'}\r\n                                {this.state.actors.map((element,i)=>{\r\n                                    return <Actor key={i} actor={element}/>\r\n                                })}\r\n                            </FourColGrid>\r\n                        </div>\r\n                        :null}\r\n                        \r\n              {!this.state.actors && !this.state.loading ? <h1>No Movie Found</h1>:null}\r\n               {this.state.loading?<Spinner />:null} \r\n            </div>\r\n        )\r\n    } \r\n}\r\n\r\nexport default Movie;"]},"metadata":{},"sourceType":"module"}